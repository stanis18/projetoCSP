--------------------------------Constants--------------------------------
datatype Status = FUNDED | RELEASED
datatype TransactionType = ETHER | TOKEN

datatype address = zeroX.{uint256}
datatype bytes32 = b32.{uint256}
datatype bytes20 = b20.{uint256}

datatype numbersType = uint | uint8 | uint32 | uint256 

Transaction = {(value, lastModified, status, transactionType, threshold, timeoutHours, 
buyer, seller, tokenAddress, moderator, released, noOfReleases) | 
value <- {uint256}, lastModified <- {uint256}, status <- Status, 
transactionType <- TransactionType, threshold <- {uint8}, timeoutHours <- {uint32},
buyer <- address, seller <- address, tokenAddress <- address, moderator <- address,
released <- {uint256}, noOfReleases <- {uint256}} 


--------------------------------Channels--------------------------------
channel createTransaction, addTransaction_ : Transaction

channel newTransaction : bytes32.Transaction
--------------------------------OpenBazaar--------------------------------

--OpenBazaar =  addTransaction!trans -> OpenBazaar

--------------------------------Contract--------------------------------
channel addTransaction, addTokenTransaction, checkBeneficiary, checkVote
channel addFundsToTransaction, addTokensToTransaction, getAllTransactionsForParty
channel execute, getTransactionHash, calculateRedeemScriptHash


--Escrow = newTransaction?transaction -> addTransaction!transaction -> Escrow

Escrow =   addTransaction -> functionAddTransaction(getParamAddTransaction())
        [] addTokenTransaction -> Escrow
        [] checkBeneficiary -> Escrow 
        [] checkBeneficiary -> Escrow 
        [] checkVote -> Escrow
        [] addFundsToTransaction -> Escrow
        [] addTokensToTransaction -> Escrow
        [] getAllTransactionsForParty -> Escrow
        [] execute -> Escrow
        [] getTransactionHash -> Escrow
        [] calculateRedeemScriptHash -> Escrow



--Método adicionar Transações--


functionAddTransaction(parameters) =  createTransaction?transaction -> addTransaction_!transaction -> Escrow


--Para lidar com os parametros da transação
getParamAddTransaction() = {(buyer, seller, moderator, threshold, timeoutHours, scriptHash, value,
uniqueId, transactionType, tokenAddress) | 
buyer <- address, seller <- address, moderator <- address, threshold <- {uint8},
timeoutHours <- {uint32}, scriptHash <- bytes32, value <- {uint256}, uniqueId <- bytes20,
transactionType <- TransactionType, tokenAddress <- address} 

getValue((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = value
getBuyer((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = buyer
getTransactionType((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = transactionType

--Janelas
WEscrow = {|addTransaction, addTokenTransaction, checkBeneficiary, checkVote, 
addFundsToTransaction, addTokensToTransaction, getAllTransactionsForParty, 
execute, getTransactionHash, calculateRedeemScriptHash,
createTransaction, addTransaction_|}


--------------------------------Blockchain--------------------------------
InitBlockchain = Blockchain((| |))

Blockchain(mapTransactions) =  addTransaction_?transaction -> Blockchain(mapTransactions)

WBlockchain = {|addTransaction_|}


updateBlockchainAddTransaction(value, map) = mapFromList(mapToList(map) ^ <value>) --Converte o mapa para lista adiciona o valor e após isso para mapa novamente
--------------------------------Utils--------------------------------




--------------------------------Asserts & Paralelism--------------------------------

EscrowAndBlockchain = Escrow [ WEscrow || WBlockchain ] InitBlockchain

assert InitBlockchain :[deadlock free]
assert InitBlockchain :[deterministic]

assert Escrow :[deadlock free]
assert Escrow :[deterministic]


assert EscrowAndBlockchain :[deadlock free]
assert EscrowAndBlockchain :[deterministic]

