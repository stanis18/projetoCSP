--------------------------------Constants--------------------------------
datatype Status = FUNDED | RELEASED
datatype TransactionType = ETHER | TOKEN

datatype address = zeroX.{uint256}
datatype bytes32 = b32.{uint256}
datatype bytes20 = b20.{uint256}

datatype numbersType = uint | uint8 | uint32 | uint256 

Transaction = {(value, lastModified, status, transactionType, threshold, timeoutHours, 
buyer, seller, tokenAddress, moderator, released, noOfReleases) | 
value <- {uint256}, lastModified <- {uint256}, status <- Status, 
transactionType <- TransactionType, threshold <- {uint8}, timeoutHours <- {uint32},
buyer <- address, seller <- address, tokenAddress <- address, moderator <- address,
released <- {uint256}, noOfReleases <- {uint256}} 

ParametersAddTransaction = {(buyer, seller, moderator, threshold, timeoutHours, scriptHash, value,
uniqueId, transactionType, tokenAddress) | 
buyer <- address, seller <- address, moderator <- address, threshold <- {uint8},
timeoutHours <- {uint32}, scriptHash <- bytes32, value <- {uint256}, uniqueId <- bytes20,
transactionType <- TransactionType, tokenAddress <- address} 
--------------------------------Channels--------------------------------
channel createTransaction: Transaction

channel newTransaction, syncAddTransaction : bytes32.Transaction

--------------------------------OpenBazaar--------------------------------

--OpenBazaar =  addTransaction!trans -> OpenBazaar

--------------------------------Contract--------------------------------
channel addTransaction, addTokenTransaction, checkBeneficiary, checkVote
channel addFundsToTransaction, addTokensToTransaction, getAllTransactionsForParty
channel execute, getTransactionHash, calculateRedeemScriptHash

channel getParamAddTransaction : ParametersAddTransaction


Escrow =   addTransaction -> getParamAddTransaction?parameters -> addTransaction_(parameters)
        [] addTokenTransaction -> Escrow
        [] checkBeneficiary -> Escrow 
        [] checkBeneficiary -> Escrow 
        [] checkVote -> Escrow
        [] addFundsToTransaction -> Escrow
        [] addTokensToTransaction -> Escrow
        [] getAllTransactionsForParty -> Escrow
        [] execute -> Escrow
        [] getTransactionHash -> Escrow
        [] calculateRedeemScriptHash -> Escrow



--Método adicionar Transações--


addTransaction_(parameters) =  createTransaction?transaction ->  syncAddTransaction!getScriptHash(parameters)!transaction -> Escrow

getValue((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = value
getBuyer((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = buyer
getTransactionType((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = transactionType
getScriptHash((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = scriptHash

--Windows
WEscrow = {|addTransaction, addTokenTransaction, checkBeneficiary, checkVote, 
addFundsToTransaction, addTokensToTransaction, getAllTransactionsForParty, 
execute, getTransactionHash, calculateRedeemScriptHash,
createTransaction, syncAddTransaction, getParamAddTransaction|}


--------------------------------Blockchain--------------------------------
InitBlockchain = Blockchain((| |))

Blockchain(mapTransactions) =  syncAddTransaction?keyBytes32?transaction -> Blockchain(updateBlockchainAddTransaction((keyBytes32, transaction), mapTransactions))

WBlockchain = {|syncAddTransaction|}


updateBlockchainAddTransaction(value, map) = mapFromList(mapToList(map) ^ <value>) --Converte o mapa para lista adiciona o valor e após isso para mapa novamente
--------------------------------Utils--------------------------------




--------------------------------Asserts & Paralelism--------------------------------

EscrowAndBlockchain = Escrow [ WEscrow || WBlockchain ] InitBlockchain

assert InitBlockchain :[deadlock free]
assert InitBlockchain :[deterministic]

assert Escrow :[deadlock free]
assert Escrow :[deterministic]


assert EscrowAndBlockchain :[deadlock free]
assert EscrowAndBlockchain :[deterministic]

