include "types.csp"

Transaction = {(value, lastModified, status, transactionType, threshold, timeoutHours, 
buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender) | 
value <- {uint256}, lastModified <- {uint256}, status <- Status, msgSender <- address,
transactionType <- TransactionType, threshold <- {uint8}, timeoutHours <- {uint32},
buyer <- address, seller <- address, tokenAddress <- address, moderator <- address,
released <- {uint256}, noOfReleases <- {uint256}, isOwner <- {(| key => value |) | key <- address, value <- Bool },
voted <- {(| key => value |) | key <- bytes32, value <- Bool }, beneficiaries <- {(| key => value |) | key <- address, value <- Bool }} 

ParametersAddTransaction = {(buyer, seller, moderator, threshold, timeoutHours, scriptHash, value,
uniqueId, transactionType, tokenAddress) | 
buyer <- address, seller <- address, moderator <- address, threshold <- {uint8},
timeoutHours <- {uint32}, scriptHash <- bytes32, value <- {uint256}, uniqueId <- bytes20,
transactionType <- {ETHER}, tokenAddress <- address} 

ParametersAddTransactionToken = {(buyer, seller, moderator, threshold, timeoutHours, scriptHash, value,
uniqueId, transactionType, tokenAddress) | 
buyer <- address, seller <- address, moderator <- address, threshold <- {uint8},
timeoutHours <- {uint32}, scriptHash <- bytes32, value <- {uint256}, uniqueId <- bytes20,
transactionType <- {TOKEN}, tokenAddress <- address} 

ParametersCalculateRedeemScriptHash = {(buyer, seller, moderator, threshold, timeoutHours, uniqueId, tokenAddress) | 
buyer <- address, seller <- address, moderator <- address, threshold <- {uint8},
timeoutHours <- {uint32}, uniqueId <- bytes20, tokenAddress <- address} 

ParametersCheckVoteORCheckBeneficiary = {(scriptHash, party) | scriptHash <- bytes32, party <- address }

ParametersAddTokensToTransaction = {(scriptHash, value, msgSender) | value <- {uint256}, scriptHash <- bytes32, msgSender <- address } 

ParametersGetTransactionHash = {(scriptHash, destinations, amounts) | scriptHash <- bytes32, destinations <- { arrayAddress }, amounts <- { arrayUint256 }} 

ParametersExecute = {(calldataSigV, calldataSigR, calldataSigS, scriptHash, calldataDestinations, calldataAmounts) | 
scriptHash <- bytes32, calldataSigV <- {<{uint8}>}, calldataSigR <- {<bytes32>}, calldataSigS <- {<bytes32>}, 
calldataDestinations <- {<address>}, calldataAmounts <- {<{uint256}>}} 


--------------------Channels--------------------------------
channel syncAddTransaction : bytes32.Transaction
channel syncAddFundsOrTokensToTransaction : bytes32.Transaction

channel syncGetTransactionID : bytes32
channel syncGetPartyID : address
channel syncGetTransaction : Transaction
channel syncGetAllTransactionsForParty, returnTransactionsForParty : {<bytes32>}

--------------------------------Contract--------------------------------
channel getAllTransactionsForParty : RawTransaction.address
channel execute : RawTransaction.ParametersExecute

channel createTransaction : Transaction
channel addTransaction : RawTransaction.ParametersAddTransaction
channel addTokenTransaction : RawTransaction.ParametersAddTransactionToken
channel calculateRedeemScriptHash : RawTransaction.ParametersCalculateRedeemScriptHash.bytes32
channel addTokensToTransaction, addFundsToTransaction : RawTransaction.ParametersAddTokensToTransaction
channel getTransactionHash : RawTransaction.ParametersGetTransactionHash.bytes32
channel checkVote, checkBeneficiary : RawTransaction.ParametersCheckVoteORCheckBeneficiary
channel transactionDoesNotExists, partyVsTransactionDoesNotExists
channel returnCheckBeneficiary, returnCheckVote : Bool
channel getValueInt, getThresholdInt, getReleasedInt : {0..5}
channel returnError : expection
channel isTimeLockExpired, getVoteScriptHash : Bool
channel createNewITokenContract
channel fundAddedEvent : numbersType.bytes32.address
channel fundedEvent : numbersType.bytes32.address
channel executedEvent : bytes32.{<address>}.{<{uint256}>}


Escrow = syncSubRawTransaction?transactionFromPool -> ( addTransaction!transactionFromPool?parameters -> addTransaction_(parameters)
                                                        [] addTokenTransaction!transactionFromPool?parameters -> addTransaction_(parameters)
                                                        [] checkBeneficiary!transactionFromPool?parameters -> checkBeneficiary_(parameters)
                                                        [] checkVote!transactionFromPool?parameters -> checkVote_(parameters)
                                                        [] addFundsToTransaction!transactionFromPool?parameters -> addFundsToTransaction_(parameters)
                                                        [] addTokensToTransaction!transactionFromPool?parameters -> addTokensToTransaction_(parameters) 
                                                        [] getAllTransactionsForParty!transactionFromPool?address -> getAllTransactionsForParty_(address)
                                                        [] execute!transactionFromPool?parameters -> execute_(parameters)
                                                        [] getTransactionHash!transactionFromPool?parameters!getBytes(getTransactionHash_(parameters)) -> Escrow
                                                        [] calculateRedeemScriptHash!transactionFromPool?parameters!getBytes(calculateRedeemScriptHash_(parameters)) -> Escrow )


--Método adicionar Transações--
addTransaction_(parameters) =  require((getBuyer(parameters) !=  getSeller(parameters)), expection1);
                               getValueInt?value -> require((value > 0), expection2);
                               getThresholdInt?threshold -> require((threshold > 0), expection3);
                               getThresholdInt?threshold -> require((threshold <= 3 ), expection4);
                               getThresholdInt?threshold -> require((threshold  == 1 or getModerator(parameters) != zeroAddress), expection5);
                               require((getScriptHash(parameters) == getBytes(calculateRedeemScriptHash_((getBuyer(parameters), getSeller(parameters), getModerator(parameters), getThreshold(parameters), getTimeoutHours(parameters), getUniqueId(parameters), getTokenAddress(parameters))))), expection6);
                               createTransaction?transaction -> syncAddTransaction!getScriptHash(parameters)!transaction -> fundedEvent!getValueTransaction(transaction)!getScriptHash(parameters)!getMsgSenderTransaction(transaction) -> Escrow
                               

require(condition, err) = if condition then SKIP
                           else throwError(err)

throwError(err) = returnError!err -> SKIP

-- para retornar valores dos parametros addTransaction_
getValue((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = value
getThreshold((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = threshold
getBuyer((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = buyer
getSeller((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = seller
getTransactionType((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = transactionType
getScriptHash((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = scriptHash
getModerator((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = moderator
getUniqueId((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = uniqueId
getTokenAddress((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = tokenAddress
getTimeoutHours((buyer, seller, moderator, threshold, timeoutHours, scriptHash, value, uniqueId, transactionType, tokenAddress)) = timeoutHours

-- retornar valores de uma transação
getBuyerTransaction((value, lastModified, status, transactionType, threshold, timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = buyer 
getStateTransaction((value, lastModified, status, transactionType, threshold, timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = status 
getTypeTransaction((value, lastModified, status, transactionType, threshold,  timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = transactionType 
getValueTransaction((value, lastModified, status, transactionType, threshold,  timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = value
getMsgSenderTransaction((value, lastModified, status, transactionType, threshold,  timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = msgSender  
getBeneficiariesTransaction((value, lastModified, status, transactionType, threshold,  timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = beneficiaries
getVotedTransaction((value, lastModified, status, transactionType, threshold,  timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases, isOwner, voted, beneficiaries, msgSender)) = voted    


-- Metodo para calcular o scriptHash
calculateRedeemScriptHash_((buyer, seller, moderator, threshold, timeoutHours, uniqueId, tokenAddress)) = bytes32


--Metodo addTokenTransaction

addTokensToTransaction_((scriptHash, value, msgSender)) = syncGetTransactionID!scriptHash ->  (syncGetTransaction?transaction -> (require((getStateTransaction(transaction) == FUNDED), expection8);
                                                                                                                                  require((getTypeTransaction(transaction) == TOKEN), expection9); 
                                                                                                                                  require((getBuyerTransaction(transaction) == msgSender), expection10);
                                                                                                                                  getValueInt?valueInt -> require((valueInt > 0), expection11);                              
                                                                                                                                  syncAddFundsOrTokensToTransaction!scriptHash!transaction -> fundAddedEvent!value!scriptHash!msgSender -> Escrow)                                                                                                                                     
                                                                                             [] transactionDoesNotExists ->  Escrow ) -- Tratar exception 7


                                                                                                                            

addFundsToTransaction_((scriptHash, value, msgSender)) = syncGetTransactionID!scriptHash -> ( syncGetTransaction?transaction -> (require((getStateTransaction(transaction) == FUNDED), expection8);
                                                                                                                                 require((getTypeTransaction(transaction) == ETHER), expection9); 
                                                                                                                                 require((getBuyerTransaction(transaction) == msgSender), expection10);
                                                                                                                                 getValueInt?valueInt -> require((valueInt > 0), expection11); 
                                                                                                                                 createNewITokenContract -> syncAddFundsOrTokensToTransaction!scriptHash!transaction -> fundAddedEvent!value!scriptHash!msgSender -> Escrow)
                                                                                             [] transactionDoesNotExists -> Escrow ) -- Tratar exception 7




checkBeneficiary_((scriptHash, beneficiary)) = syncGetTransactionID!scriptHash -> ( syncGetTransaction?transaction -> (if mapMember(getBeneficiariesTransaction(transaction), beneficiary) then returnCheckBeneficiary!mapLookup(getBeneficiariesTransaction(transaction), beneficiary) -> Escrow
                                                                                                                      else returnCheckBeneficiary!false -> Escrow)
                                                                               [] transactionDoesNotExists -> returnCheckBeneficiary!false -> Escrow)

checkVote_((scriptHash, party)) = syncGetTransactionID!scriptHash -> ( syncGetTransaction?transaction -> (if mapMember(getVotedTransaction(transaction), scriptHash) then returnCheckVote!mapLookup(getVotedTransaction(transaction), scriptHash) -> Escrow
                                                                                                                      else returnCheckVote!false -> Escrow)
                                                                               [] transactionDoesNotExists -> returnCheckVote!false -> Escrow)


getAllTransactionsForParty_(parameter) = syncGetPartyID!parameter -> getAllTransactionsForParty?listPartyTransaction -> Escrow
                                                                   []  partyVsTransactionDoesNotExists -> Escrow






execute_((calldataSigV, calldataSigR, calldataSigS, scriptHash, calldataDestinations, calldataAmounts)) =   syncGetTransactionID!scriptHash -> ( syncGetTransaction?transaction -> ( getValueInt?value -> require((value != 0), expection7); 
                                                                                                                                                                                     getReleasedInt?released -> getValueInt?value -> require((value - released < 0), expection12);                  
                                                                                                                                                                                     require ((length(calldataDestinations) > 0), expection13);
                                                                                                                                                                                     require ((length(calldataDestinations) == length(calldataAmounts)), expection14);
                                                                                                                                                                                     verifySignatures_((calldataSigV, calldataSigR, calldataSigS, scriptHash, calldataDestinations, calldataAmounts));
                                                                                                                                                                                       executedEvent!scriptHash!calldataDestinations!calldataAmounts -> Escrow) 
                                                                                                
                                                                                                                                                [] transactionDoesNotExists -> Escrow)





verifySignatures_((calldataSigV, calldataSigR, calldataSigS, scriptHash, calldataDestinations, calldataAmounts)) = isTimeLockExpired?expired -> getThresholdInt?threshold -> ( require ( (length(calldataSigV) < threshold and expired != false), expection15);
                                                                                                                                                                               getVoteScriptHash?vote -> require( (vote != false), expection16);
                                                                                                                                                                               SKIP )
                                                                                                                                                                                                        

--Metodo para conseguir o hash da transacao
getTransactionHash_((scriptHash, destinations, amounts)) = bytes32

--------------------------------Utils--------------------------------
add((value, lastModified, status, transactionType, threshold, timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases), valueToAdd) = (value, lastModified, status, transactionType, threshold, timeoutHours, buyer, seller, tokenAddress, moderator, released, noOfReleases)

getBytes({bytes}) = bytes